/*! For license information please see index.main.js.LICENSE.txt */
(()=>{"use strict";var t={344:()=>{},950:(t,e,n)=>{n.r(e)},947:(t,e,n)=>{n.r(e),n.d(e,{ArgumentOutOfRangeError:()=>wt,AsyncSubject:()=>it,BehaviorSubject:()=>P,ConnectableObservable:()=>N,EMPTY:()=>q,EmptyError:()=>_t,GroupedObservable:()=>M,NEVER:()=>ye,Notification:()=>Q,NotificationKind:()=>U,ObjectUnsubscribedError:()=>I,Observable:()=>S,ReplaySubject:()=>nt,Scheduler:()=>K,Subject:()=>L,Subscriber:()=>y,Subscription:()=>p,TimeoutError:()=>St,UnsubscriptionError:()=>d,VirtualAction:()=>gt,VirtualTimeScheduler:()=>vt,animationFrame:()=>yt,animationFrameScheduler:()=>bt,asap:()=>lt,asapScheduler:()=>ht,async:()=>pt,asyncScheduler:()=>dt,bindCallback:()=>Ot,bindNodeCallback:()=>At,combineLatest:()=>qt,concat:()=>ne,config:()=>u,defer:()=>re,empty:()=>V,forkJoin:()=>ie,from:()=>Wt,fromEvent:()=>se,fromEventPattern:()=>ce,generate:()=>ae,identity:()=>E,iif:()=>le,interval:()=>pe,isObservable:()=>Et,merge:()=>be,never:()=>ve,noop:()=>mt,observable:()=>m,of:()=>X,onErrorResumeNext:()=>ge,pairs:()=>me,partition:()=>Ie,pipe:()=>w,queue:()=>G,queueScheduler:()=>F,race:()=>Te,range:()=>Ce,scheduled:()=>Ut,throwError:()=>z,timer:()=>De,using:()=>ke,zip:()=>Me});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function c(t){setTimeout((function(){throw t}),0)}var a={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},h=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function l(t){return null!==t&&"object"==typeof t}var d=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),p=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this,r=n._parentOrParents,i=n._ctorUnsubscribe,s=n._unsubscribe,u=n._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var c=0;c<r.length;++c)r[c].remove(this);if(o(s)){i&&(this._unsubscribe=void 0);try{s.call(this)}catch(t){e=t instanceof d?f(t.errors):[t]}}if(h(u)){c=-1;for(var a=u.length;++c<a;){var p=u[c];if(l(p))try{p.unsubscribe()}catch(t){e=e||[],t instanceof d?e=e.concat(f(t.errors)):e.push(t)}}}if(e)throw new d(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function f(t){return t.reduce((function(t,e){return t.concat(e instanceof d?e.errors:e)}),[])}var b=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),y=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=a;break;case 1:if(!n){o.destination=a;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new v(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new v(o,n,r,i)}return o}return i(e,t),e.prototype[b]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(p),v=function(t){function e(e,n,r,i){var s,u=t.call(this)||this;u._parentSubscriber=e;var c=u;return o(n)?s=n:n&&(s=n.next,r=n.error,i=n.complete,n!==a&&(o((c=Object.create(n)).unsubscribe)&&u.add(c.unsubscribe.bind(c)),c.unsubscribe=u.unsubscribe.bind(u))),u._context=c,u._next=s,u._error=r,u._complete=i,u}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=u.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);function g(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof y?r:null}return!0}var m=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function E(t){return t}function w(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return _(t)}function _(t){return 0===t.length?E:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof y)return t;if(t[b])return t[b]()}return t||e||n?new y(t,e,n):new y(a)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),u.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),g(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=x(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[m]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:_(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=x(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function x(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var I=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),T=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(p),O=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i(e,t),e}(y),L=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[b]=function(){return new O(this)},e.prototype.lift=function(t){var e=new C(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new I;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new I;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new I;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new I;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new I;return this.hasError?(t.error(this.thrownError),p.EMPTY):this.isStopped?(t.complete(),p.EMPTY):(this.observers.push(t),new T(this,t))},e.prototype.asObservable=function(){var t=new S;return t.source=this,t},e.create=function(t,e){return new C(t,e)},e}(S),C=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):p.EMPTY},e}(L),A=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new D(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),D=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(y),N=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new p).add(this.source.subscribe(new k(this.getSubject(),this))),t.closed&&(this._connection=null,t=p.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new A(t));var t},e}(S),k=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(O),M=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return i(e,t),e.prototype._subscribe=function(t){var e=new p,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new B(n)),e.add(r.subscribe(t)),e},e}(S),B=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(p),P=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new I;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(L),j=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(p)),R=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(j),K=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),H=function(t){function e(n,r){void 0===r&&(r=K.now);var i=t.call(this,n,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(K),F=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(H))(R),G=F,q=new S((function(t){return t.complete()}));function V(t){return t?function(t){return new S((function(e){return t.schedule((function(){return e.complete()}))}))}(t):q}function Z(t){return t&&"function"==typeof t.schedule}var U,W=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function Y(t,e){return new S((function(n){var r=new p,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function $(t,e){return e?Y(t,e):new S(W(t))}function X(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return Z(n)?(t.pop(),Y(t,n)):$(t)}function z(t,e){return new S(e?function(n){return e.schedule(J,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function J(t){var e=t.error;t.subscriber.error(e)}U||(U={});var Q=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return X(this.value);case"E":return z(this.error);case"C":return V()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}(),tt=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return i(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new et(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(Q.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(Q.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(Q.createComplete()),this.unsubscribe()},e}(y),et=function(){return function(t,e){this.notification=t,this.destination=e}}(),nt=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(e,t),e.prototype.nextInfiniteTimeWindow=function(e){if(!this.isStopped){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift()}t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this.isStopped||(this._events.push(new rt(this._getNow(),e)),this._trimBufferThenGetEvents()),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new I;if(this.isStopped||this.hasError?e=p.EMPTY:(this.observers.push(t),e=new T(this,t)),i&&t.add(t=new tt(t,i)),n)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||G).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(L),rt=function(){return function(t,e){this.time=t,this.value=e}}(),it=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),p.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),p.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(L),ot=1,st=function(){return Promise.resolve()}(),ut={};function ct(t){return t in ut&&(delete ut[t],!0)}var at=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=(i=e.flush.bind(e,null),o=ot++,ut[o]=!0,st.then((function(){return ct(o)&&i()})),o)));var i,o},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(ct(n),e.scheduled=void 0)},e}(j),ht=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(H))(at),lt=ht,dt=new H(j),pt=dt,ft=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(j),bt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(H))(ft),yt=bt,vt=function(t){function e(e,n){void 0===e&&(e=gt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(H),gt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return i(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(j);function mt(){}function Et(t){return!!t&&(t instanceof S||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var wt=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}(),_t=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}(),St=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();function xt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new It(t,e))}}var It=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Tt(t,this.project,this.thisArg))},t}(),Tt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y);function Ot(t,e,n){if(e){if(!Z(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Ot(t,n).apply(void 0,r).pipe(xt((function(t){return h(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,o=this,s={context:o,subject:i,callbackFunc:t,scheduler:n};return new S((function(r){if(n){var u={args:e,subscriber:r,params:s};return n.schedule(Lt,0,u)}if(!i){i=new it;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){g(i)?i.error(t):console.warn(t)}}return i.subscribe(r)}))}}function Lt(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,c=i.subject;if(!c){c=i.subject=new it;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(Ct,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function Ct(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function At(t,e,n){if(e){if(!Z(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return At(t,n).apply(void 0,r).pipe(xt((function(t){return h(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new S((function(r){var o=i.context,s=i.subject;if(n)return n.schedule(Dt,0,{params:i,subscriber:r,context:o});if(!s){s=i.subject=new it;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){g(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function Dt(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,c=n.subject;if(!c){c=n.subject=new it;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(kt,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(Nt,0,{value:i,subject:c}))}}]))}catch(t){this.add(u.schedule(kt,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function Nt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function kt(t){var e=t.err;t.subject.error(e)}var Mt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(y),Bt=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(y);function Pt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var jt=Pt(),Rt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Kt(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var Ht=function(t){if(t&&"function"==typeof t[m])return r=t,function(t){var e=r[m]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Rt(t))return W(t);if(Kt(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,c),t};if(t&&"function"==typeof t[jt])return e=t,function(t){for(var n=e[jt]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,i=l(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Ft(t,e,n,r,i){if(void 0===i&&(i=new Bt(t,n,r)),!i.closed)return e instanceof S?e.subscribe(i):Ht(e)(i)}var Gt={};function qt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=void 0,r=void 0;return Z(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&h(t[0])&&(t=t[0]),$(t,r).lift(new Vt(n))}var Vt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Zt(t,this.resultSelector))},t}(),Zt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(e,t),e.prototype._next=function(t){this.values.push(Gt),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Ft(this,r,void 0,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n){var r=this.values,i=r[n],o=this.toRespond?i===Gt?--this.toRespond:this.toRespond:0;r[n]=e,0===o&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Mt);function Ut(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[m]}(t))return function(t,e){return new S((function(n){var r=new p;return r.add(e.schedule((function(){var i=t[m]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(Kt(t))return function(t,e){return new S((function(n){var r=new p;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Rt(t))return Y(t,e);if(function(t){return t&&"function"==typeof t[jt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new S((function(n){var r,i=new p;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=t[jt](),i.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),i}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Wt(t,e){return e?Ut(t,e):t instanceof S?t:new S(Ht(t))}var Yt=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,n}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(y),$t=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(y);function Xt(t,e){if(!e.closed){if(t instanceof S)return t.subscribe(e);var n;try{n=Ht(t)(e)}catch(t){e.error(t)}return n}}function zt(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(zt((function(n,r){return Wt(t(n,r)).pipe(xt((function(t,i){return e(n,t,r,i)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new Jt(t,n))})}var Jt=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new Qt(t,this.project,this.concurrent))},t}(),Qt=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new Yt(this),n=this.destination;n.add(e);var r=Xt(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}($t);function te(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),zt(E,t)}function ee(){return te(1)}function ne(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return ee()(X.apply(void 0,t))}function re(t){return new S((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Wt(n):V()).subscribe(e)}))}function ie(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(h(n))return oe(n,null);if(l(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return oe(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return oe(t=1===t.length&&h(t[0])?t[0]:t,null).pipe(xt((function(t){return i.apply(void 0,t)})))}return oe(t,null)}function oe(t,e){return new S((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var c=Wt(t[u]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},c=0;c<r;c++)u(c);else n.complete()}))}function se(t,e,n,r){return o(n)&&(r=n,n=void 0),r?se(t,e,n).pipe(xt((function(t){return h(t)?r.apply(void 0,t):r(t)}))):new S((function(r){ue(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function ue(t,e,n,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var s=t;t.addEventListener(e,n,i),o=function(){return s.removeEventListener(e,n,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var u=t;t.on(e,n),o=function(){return u.off(e,n)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var c=t;t.addListener(e,n),o=function(){return c.removeListener(e,n)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var a=0,h=t.length;a<h;a++)ue(t[a],e,n,r,i)}r.add(o)}function ce(t,e,n){return n?ce(t,e).pipe(xt((function(t){return h(t)?n.apply(void 0,t):n(t)}))):new S((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(o(e))return function(){return e(i,r)}}))}function ae(t,e,n,r,i){var o,s;if(1==arguments.length){var u=t;s=u.initialState,e=u.condition,n=u.iterate,o=u.resultSelector||E,i=u.scheduler}else void 0===r||Z(r)?(s=t,o=E,i=r):(s=t,o=r);return new S((function(t){var r=s;if(i)return i.schedule(he,0,{subscriber:t,iterate:n,condition:e,resultSelector:o,state:r});for(;;){if(e){var u=void 0;try{u=e(r)}catch(e){return void t.error(e)}if(!u){t.complete();break}}var c=void 0;try{c=o(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function he(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function le(t,e,n){return void 0===e&&(e=q),void 0===n&&(n=q),re((function(){return t()?e:n}))}function de(t){return!h(t)&&t-parseFloat(t)+1>=0}function pe(t,e){return void 0===t&&(t=0),void 0===e&&(e=pt),(!de(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=pt),new S((function(n){return n.add(e.schedule(fe,t,{subscriber:n,counter:0,period:t})),n}))}function fe(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function be(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,i=t[t.length-1];return Z(i)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof i&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof S?t[0]:te(n)($(t,r))}var ye=new S(mt);function ve(){return ye}function ge(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return q;var n=t[0],r=t.slice(1);return 1===t.length&&h(n)?ge.apply(void 0,n):new S((function(t){var e=function(){return t.add(ge.apply(void 0,r).subscribe(t))};return Wt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function me(t,e){return new S(e?function(n){var r=Object.keys(t),i=new p;return i.add(e.schedule(Ee,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function Ee(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function we(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function _e(t,e){return function(n){return n.lift(new Se(t,e))}}var Se=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new xe(t,this.predicate,this.thisArg))},t}(),xe=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(y);function Ie(t,e,n){return[_e(e,n)(new S(Ht(t))),_e(we(e,n))(new S(Ht(t)))]}function Te(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!h(t[0]))return t[0];t=t[0]}return $(t,void 0).lift(new Oe)}var Oe=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Le(t))},t}(),Le=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=Ft(this,t[n],void 0,n);this.subscriptions&&this.subscriptions.push(r),this.add(r)}this.observables=null}},e.prototype.notifyNext=function(t,e,n){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==n){var i=this.subscriptions[r];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(e)},e}(Mt);function Ce(t,e,n){return void 0===t&&(t=0),new S((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(Ae,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function Ae(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function De(t,e,n){void 0===t&&(t=0);var r=-1;return de(e)?r=Number(e)<1?1:Number(e):Z(e)&&(n=e),Z(n)||(n=pt),new S((function(e){var i=de(t)?t:+t-n.now();return n.schedule(Ne,i,{index:0,period:r,subscriber:e})}))}function Ne(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function ke(t,e){return new S((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Wt(i):q).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}function Me(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),$(t,void 0).lift(new Be(n))}var Be=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Pe(t,this.resultSelector))},t}(),Pe=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.resultSelector=n,i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:void 0,i}return i(e,t),e.prototype._next=function(t){var e=this.iterators;h(t)?e.push(new Re(t)):"function"==typeof t[jt]?e.push(new je(t[jt]())):e.push(new Ke(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];r.stillUnsubscribed?this.destination.add(r.subscribe()):this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++)if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return;var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y),je=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),Re=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[jt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),Ke=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(e,t),e.prototype[jt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(){return Xt(this.observable,new Yt(this))},e}($t)},601:(t,e)=>{var n,r,i,o;Object.defineProperty(e,"__esModule",{value:!0}),e.selectedSnakeKeyMap=e.directionKeyMap=e.Direction=e.Color=e.MAX_SNAKES_COUNT=e.SNAKES=e.DEFAULT_GAME_CONFIG=e.SnakeType=e.GameOver=e.INIT_SNAKE_SIZE=e.FRAME_RATE=e.BLOCK_SIZE=e.BOARD_HEIGHT=e.BOARD_WIDTH=void 0,e.BOARD_WIDTH=50,e.BOARD_HEIGHT=25,e.BLOCK_SIZE=20,e.FRAME_RATE=10,e.INIT_SNAKE_SIZE=5,(o=e.GameOver||(e.GameOver={}))[o.HIT_SELF=1]="HIT_SELF",o[o.HIT_WALL=2]="HIT_WALL",function(t){t.VIPER="Viper",t.MAMBA="Mamba",t.DISPHOLIDUS="Dispholidus",t.ANACONDA="Anaconda",t.PYTHON="Python",t.ANILIUS="Anilius"}(n=e.SnakeType||(e.SnakeType={})),e.DEFAULT_GAME_CONFIG={snakeType:n.VIPER,snakeCount:2},e.SNAKES=[{type:n.VIPER,pattern:["blue","grey"]},{type:n.MAMBA,pattern:["green"]},{type:n.DISPHOLIDUS,pattern:["red","blue","red"]},{type:n.ANACONDA,pattern:["yellow","grey"]},{type:n.PYTHON,pattern:["grey","darkgrey"]},{type:n.ANILIUS,pattern:["pink","blue","orange","pink"]}],e.MAX_SNAKES_COUNT=5,(i=e.Color||(e.Color={})).GRID="rgb(38, 38, 38)",i.SNAKE_HEAD="white",i.SNAKE_HEAD_SELECTED="red",i.SNAKE_HEAD_TEXT="black",i.SNAKE_HEAD_TEXT_SELECTED="white",i.FOOD="lightgreen",i.WALL="red",function(t){t[t.UP=1]="UP",t[t.DOWN=2]="DOWN",t[t.LEFT=3]="LEFT",t[t.RIGHT=4]="RIGHT"}(r=e.Direction||(e.Direction={})),e.directionKeyMap=new Map,e.directionKeyMap.set("ArrowLeft",r.LEFT),e.directionKeyMap.set("ArrowUp",r.UP),e.directionKeyMap.set("ArrowRight",r.RIGHT),e.directionKeyMap.set("ArrowDown",r.DOWN),e.selectedSnakeKeyMap=new Map,e.selectedSnakeKeyMap.set("Digit1",1),e.selectedSnakeKeyMap.set("Digit2",2),e.selectedSnakeKeyMap.set("Digit3",3),e.selectedSnakeKeyMap.set("Digit4",4),e.selectedSnakeKeyMap.set("Digit5",5)},40:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Board=void 0;const r=n(947),i=n(601),o=n(382);e.Board=class{constructor(t,e){this.selectedSnake=0,this.food=[],this.wall=[],this._snakeCount=i.DEFAULT_GAME_CONFIG.snakeCount,this._snakeType=i.DEFAULT_GAME_CONFIG.snakeType,this.deathReason$=new r.ReplaySubject(1),this.bounds={x:t,y:e}}get width(){return this.bounds.x}get height(){return this.bounds.y}get snakeCount(){return this._snakeCount}get snakeType(){return this._snakeType}setSnakeType(t){this._snakeType=t}setSnakeCount(t){this._snakeCount=t}resetBoard(){this.wall=[],this.deathReason$.next(null)}canProceed(){for(let t=0;t<this.snakes.length;t++){const e=this.snakes[t],n=this.bumpToWall(e.newHead),r=this.bumpToSnake(e.newHead);if(n)return this.deathReason$.next(i.GameOver.HIT_WALL),!1;if(r)return this.deathReason$.next(i.GameOver.HIT_SELF),!1}return!0}bumpToSnake(t){return this.snakes.some((e=>e.sequence.some((e=>e.x===t.x&&e.y===t.y))))}bumpToWall(t){const e=t.x<0||t.y<0||t.x>=this.bounds.x||t.y>=this.bounds.y,n=this.wall.find((({x:e,y:n})=>e===t.x&&n===t.y));return e||!!n}setWalls(t,e){const n={x:t,y:e},r=!this.wall.find((n=>n.x===t&&n.y===e)),i=!this.snakes.find((n=>n.sequence.find((n=>n.x===t&&n.y===e))));r&&i&&this.wall.push(n)}removeWalls(t,e){const n=this.wall.findIndex((n=>n.x===t&&n.y===e));n>=0&&this.wall.splice(n,1)}tick(){for(let t=0;t<this.snakes.length;t++){const e=this.snakes[t];e.step();const n=this.food.findIndex((t=>t.x===e.newHead.x&&t.y===e.newHead.y));if(n>=0)return e.grow(),this.food.splice(n,1),this.food.push(o.getRandomCoords(this.bounds,[])),!0}return!1}}},188:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Page=void 0;const r=n(601),i=n(601),o=n(382),s=n(773),u=n(40),c=n(239);e.Page=class{constructor(t){this.eatCount=0,this.dialog=new s.Dialog,this.foodInfo=document.querySelector(".food"),this.wallInfo=document.querySelector(".wall"),this.gameOverContainer=document.querySelector(".gameover"),this.isGamePlaying=!1,this.onKeyDown=t=>{const e=r.directionKeyMap.get(t.code);e&&this.board.snakes.find(((t,e)=>e===this.board.selectedSnake)).setDirection(e);const n=r.selectedSnakeKeyMap.get(t.code);n&&(this.board.selectedSnake=n-1)},this.board=new u.Board(r.BOARD_WIDTH,r.BOARD_HEIGHT),this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.drawGrid()}startGame(){this.board.resetBoard();const t=[],e=[];for(let n=0;n<this.board.snakeCount;n++){const r=o.getStartingCoords(this.board.snakeCount,n);t.push(new c.Snake(r));const i=o.getRandomCoords(this.board.bounds,[]);e.push(i)}this.board.snakes=t,this.board.food=e,this.render(),this.isGamePlaying=!0}stopGame(){cancelAnimationFrame(this.intervalId.value),this.board.deathReason$.pipe().subscribe((t=>{t&&this.dialog.setDialogState(s.DialogState.GAME_OVER,this.getGameOverMessage(t))}))}pauseGame(t=!0){t?cancelAnimationFrame(this.intervalId.value):this.render(),this.isGamePlaying=!this.isGamePlaying}render(t=!1){this.intervalId=o.requestInterval((()=>{this.board.canProceed()?(this.drawAll(),t||this.board.tick()&&(this.eatCount++,this.foodInfo.innerText=this.eatCount.toString())):this.stopGame()}),500,(()=>this.drawAll()))}drawAll(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.drawGrid(),this.drawWall(),this.drawFood(),this.board.snakes.forEach(((t,e)=>{this.drawSnake(t,e)})),this.wallInfo.innerText=this.board.wall.length.toString()}drawGrid(){this.ctx.beginPath(),this.ctx.strokeStyle=r.Color.GRID;for(let t=0;t<=this.board.width;t++)this.ctx.moveTo(t*(r.BLOCK_SIZE+1)+1,0),this.ctx.lineTo(t*(r.BLOCK_SIZE+1)+1,(r.BLOCK_SIZE+1)*this.board.height+1);for(let t=0;t<=this.board.height;t++)this.ctx.moveTo(0,t*(r.BLOCK_SIZE+1)+1),this.ctx.lineTo((r.BLOCK_SIZE+1)*this.board.width+1,t*(r.BLOCK_SIZE+1)+1);this.ctx.stroke()}drawWall(){this.ctx.beginPath(),this.ctx.strokeStyle=r.Color.WALL,this.board.wall.forEach((t=>{this.ctx.lineWidth=7,this.ctx.moveTo(t.x*(r.BLOCK_SIZE+1)+1,t.y*(r.BLOCK_SIZE+1)+1),this.ctx.lineTo(t.x*(r.BLOCK_SIZE+1)+1+r.BLOCK_SIZE,t.y*(r.BLOCK_SIZE+1)+1+r.BLOCK_SIZE),this.ctx.moveTo(t.x*(r.BLOCK_SIZE+1)+1,t.y*(r.BLOCK_SIZE+1)+r.BLOCK_SIZE+1),this.ctx.lineTo(t.x*(r.BLOCK_SIZE+1)+1+r.BLOCK_SIZE,t.y*(r.BLOCK_SIZE+1)+1)})),this.ctx.stroke(),this.ctx.lineWidth=1}drawSnake(t,e){const{x:n,y:s}=t.head,u=e===this.board.selectedSnake,c=i.SNAKES.find((t=>t.type===this.board.snakeType)).pattern,a=o.getFullPattern(c,t.sequence.length);t.sequence.forEach(((t,e)=>{this.ctx.fillStyle=a[e],this.ctx.fillRect(t.x*(r.BLOCK_SIZE+1)+1,t.y*(r.BLOCK_SIZE+1)+1,r.BLOCK_SIZE,r.BLOCK_SIZE)})),this.ctx.fillStyle=u?r.Color.SNAKE_HEAD_SELECTED:r.Color.SNAKE_HEAD,this.ctx.fillRect(n*(r.BLOCK_SIZE+1)+1,s*(r.BLOCK_SIZE+1)+1,r.BLOCK_SIZE,r.BLOCK_SIZE),this.ctx.fillStyle=u?r.Color.SNAKE_HEAD_TEXT_SELECTED:r.Color.SNAKE_HEAD_TEXT,this.ctx.font='23px "VT323"',this.ctx.fillText((e+1).toString(),n*(r.BLOCK_SIZE+1)+2+4,(s+1)*(r.BLOCK_SIZE+1)+1-4)}drawFood(){this.ctx.beginPath(),this.ctx.fillStyle=r.Color.FOOD,this.board.food.forEach((t=>{const e=t.x*(r.BLOCK_SIZE+1)+1+r.BLOCK_SIZE/2,n=t.y*(r.BLOCK_SIZE+1)+1+r.BLOCK_SIZE/2;this.ctx.arc(e,n,r.BLOCK_SIZE/2,0,2*Math.PI,!1),this.ctx.fill(),this.ctx.closePath()}))}getGameOverMessage(t){switch(t){case r.GameOver.HIT_SELF:return"You have hit yourself.";case r.GameOver.HIT_WALL:return"You have hit a wall.";default:return"Maybe you cannot handle this."}}}},239:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Snake=void 0;const r=n(601),i=n(382);e.Snake=class{constructor(t){this.sequence=[],this.direction=r.Direction.RIGHT;let e=r.INIT_SNAKE_SIZE;for(this.sequence.push(t);e>0;){const t=i.getNextCoords(this.sequence[this.sequence.length-1],r.Direction.LEFT);this.sequence.push(t),e--}}get head(){return this.sequence[0]}get newHead(){return i.getNextCoords(this.sequence[0],this.direction)}setDirection(t){i.isDirectionOpposite(t,this.direction)||(this.direction=t)}grow(){const t=i.getNextCoords(this.sequence[this.sequence.length-1],this.direction);this.sequence.push(t)}step(){this.sequence.pop(),this.sequence.unshift(this.newHead)}}},382:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getFullPattern=e.requestInterval=e.isDirectionOpposite=e.getNextCoords=e.getRandomCoords=e.getStartingCoords=void 0;const r=n(601);e.getStartingCoords=function(t,e){return{x:Math.floor(r.BOARD_WIDTH/(t+1)*(e+1)),y:Math.floor(r.BOARD_HEIGHT/(t+1)*(e+1))}},e.getRandomCoords=function(t,e){let n={x:Math.floor(Math.random()*t.x),y:Math.floor(Math.random()*t.y)};for(;e.find((t=>t.x===n.x&&t.y===n.y));)n={x:Math.floor(Math.random()*t.x),y:Math.floor(Math.random()*t.y)};return n},e.getNextCoords=function(t,e){switch(e){case r.Direction.UP:return Object.assign(Object.assign({},t),{y:t.y-1});case r.Direction.DOWN:return Object.assign(Object.assign({},t),{y:t.y+1});case r.Direction.LEFT:return Object.assign(Object.assign({},t),{x:t.x-1});case r.Direction.RIGHT:default:return Object.assign(Object.assign({},t),{x:t.x+1})}};const i={[r.Direction.UP]:r.Direction.DOWN,[r.Direction.DOWN]:r.Direction.UP,[r.Direction.LEFT]:r.Direction.RIGHT,[r.Direction.RIGHT]:r.Direction.LEFT};e.isDirectionOpposite=function(t,e){return i[t]===e},e.requestInterval=function(t,e,n){let r=(new Date).getTime();const i={value:0};return i.value=window.requestAnimationFrame((function o(){console.log("[DEV] loop"),i.value=window.requestAnimationFrame(o);const s=(new Date).getTime()-r;n&&n.call(),s>=e&&(t.call(),r=(new Date).getTime())})),i},e.getFullPattern=function(t,e){let n=[];for(let r=0;r<e;r++)n.push(t[r%t.length]);return n}},607:(t,e,n)=>{n(950);const r=n(601),i=n(188),o=n(773);var s;!function(t){t.COUNT_CONTAINER="count-container",t.SELECTED="selected"}(s||(s={})),new class{constructor(){this.isDebugMode=this.getDebugMode(),this.canvas=document.querySelector("canvas"),this.page=new i.Page(this.canvas),this.dialog=this.page.dialog,this.restartButton=document.querySelector("button.restart"),this.pauseButton=document.querySelector("button.pause"),this.pencilButton=document.querySelector("button.pencil"),this.eraserButton=document.querySelector("button.eraser"),this.shouldRecord=!1,this.mouseDownListener=t=>{"CANVAS"===t.target.tagName&&(this.shouldRecord=!0,document.body.style.cursor="crosshair",this.page.isGamePlaying||this.page.render(!0))},this.mouseUpListener=t=>{"CANVAS"===t.target.tagName&&(this.shouldRecord=!1,document.body.style.cursor="default",this.page.isGamePlaying||cancelAnimationFrame(this.page.intervalId.value))},this.pencilMouseMoveListener=t=>{if(!this.shouldRecord)return;const[e,n]=this.getNormalisedXY(t);this.page.board.setWalls(e,n)},this.eraserMouseMoveListener=t=>{if(!this.shouldRecord)return;const[e,n]=this.getNormalisedXY(t);this.page.board.removeWalls(e,n)},this.initCanvas(),this.addListeners(),this.updateSelectedConfig(),this.enableDebugMode()}enableDebugMode(){if(!this.isDebugMode)return;console.log("[DEV] enableDebugMode");const t=document.createElement("div");t.classList.add("debug");for(let e=0;e<r.BOARD_WIDTH;e++){const n=document.createElement("span");n.innerText=String(e+1),t.appendChild(n)}document.querySelector(".container").prepend(t)}getDebugMode(){var t=new URL(window.location.href);return new URLSearchParams(t.search).get("debug")}initCanvas(){this.canvas.height=(r.BLOCK_SIZE+1)*r.BOARD_HEIGHT+1,this.canvas.width=(r.BLOCK_SIZE+1)*r.BOARD_WIDTH+1}updateSelectedConfig(){this.dialog.countButtons.forEach((t=>{this.page.board.snakeCount===Number(t.dataset.count)?t.classList.add(`${s.SELECTED}`):t.classList.remove(`${s.SELECTED}`)})),this.dialog.typeButtons.forEach((t=>{this.page.board.snakeType===t.dataset.type?t.classList.add(`${s.SELECTED}`):t.classList.remove(`${s.SELECTED}`)}))}addShouldRecordListeners(){window.addEventListener("mousedown",this.mouseDownListener),window.addEventListener("mouseup",this.mouseUpListener)}removeMouseUpDownListners(){window.removeEventListener("mousedown",this.mouseDownListener),window.removeEventListener("mouseup",this.mouseUpListener),window.removeEventListener("mousemove",this.pencilMouseMoveListener),window.removeEventListener("mousemove",this.eraserMouseMoveListener)}getNormalisedXY(t){const{pageX:e,pageY:n}=t,{left:i,top:o}=this.canvas.getBoundingClientRect(),s=e-i,u=n-o;return[Math.floor(s/(r.BLOCK_SIZE+1)),Math.floor(u/(r.BLOCK_SIZE+1))]}addListeners(){this.dialog.countButtons.forEach((t=>{t.addEventListener("click",(()=>{this.page.board.setSnakeCount(Number(t.dataset.count)),this.updateSelectedConfig()}))})),this.dialog.typeButtons.forEach((t=>{t.addEventListener("click",(()=>{this.page.board.setSnakeType(t.dataset.type),this.updateSelectedConfig()}))})),this.dialog.startButton.addEventListener("click",(t=>{t.target.classList.add("selected"),this.page.startGame(),setTimeout((()=>{this.dialog.setDialogState(o.DialogState.HIDDEN)}),200)})),this.restartButton.addEventListener("click",(t=>{[...document.querySelectorAll("button")].forEach((t=>{console.log("button",t)})),t.target.classList.add("selected"),this.dialog.startButton.classList.remove("selected"),this.pencilButton.classList.remove("selected"),this.eraserButton.classList.remove("selected"),setTimeout((()=>{this.restartButton.classList.remove("selected"),this.page.board.resetBoard(),this.page.dialog.setDialogState(o.DialogState.GAME_CONFIG)}),200)})),this.pauseButton.addEventListener("click",(t=>{const e="Pause"===this.pauseButton.innerText;this.page.pauseGame(e),this.flipPauseButtons(e,t.target)})),this.pencilButton.addEventListener("click",(t=>{this.removeMouseUpDownListners(),t.target.classList.toggle("selected"),this.eraserButton.classList.contains("selected")&&this.eraserButton.classList.remove("selected"),this.addShouldRecordListeners(),window.addEventListener("mousemove",this.pencilMouseMoveListener)})),this.eraserButton.addEventListener("click",(t=>{this.removeMouseUpDownListners(),t.target.classList.toggle("selected"),this.pencilButton.classList.contains("selected")&&this.pencilButton.classList.remove("selected"),this.addShouldRecordListeners(),window.addEventListener("mousemove",this.eraserMouseMoveListener)})),window.addEventListener("keydown",(t=>this.page.onKeyDown(t)))}flipPauseButtons(t=!0,e){const n=t?"Resume":"Pause";e.classList.add("selected"),setTimeout((()=>{this.pauseButton.innerText=n,this.pauseButton.classList.toggle("pause"),this.pauseButton.classList.toggle("resume"),t||(this.pencilButton.classList.remove("selected"),this.eraserButton.classList.remove("selected")),setTimeout((()=>{e.classList.remove("selected")}),100)}),200)}}},773:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Dialog=e.DialogState=void 0;const r=n(947),i=n(601),o=n(382);var s;!function(t){t[t.GAME_CONFIG=1]="GAME_CONFIG",t[t.HIDDEN=2]="HIDDEN",t[t.GAME_OVER=3]="GAME_OVER"}(s=e.DialogState||(e.DialogState={})),e.Dialog=class{constructor(){this.dialogState$=new r.BehaviorSubject(s.GAME_CONFIG),this.dialogElement=document.getElementById("dialog"),this.dialogElement.innerHTML=this.getTemplate(),this.startButton=this.dialogElement.querySelector("button.start"),this.countButtons=[...this.dialogElement.querySelectorAll("button.count")],this.typeButtons=[...this.dialogElement.querySelectorAll("button.type")],this.dialogState$.subscribe((t=>{switch(t){case s.HIDDEN:return this.dialogElement.classList.add("transition"),void this.dialogElement.classList.add("hide");case s.GAME_CONFIG:return this.dialogElement.classList.remove("hide"),void this.dialogElement.classList.remove("gameover");case s.GAME_OVER:return this.dialogElement.classList.remove("hide"),void this.dialogElement.classList.add("gameover");default:return}}))}setDialogState(t,e=""){e&&(document.querySelector(".message").innerText=e),this.dialogState$.next(t)}getSnakesTemplate(){return`\n        ${i.SNAKES.map((t=>{const e=o.getFullPattern(t.pattern,8),n=[0,1,2,3,4,5,6,7].map((t=>`<span class="section" style="background: ${e[t]}"></span>`)).join("");return`<button class="type" data-type="${t.type}">\n              <div class="body">\n                ${n}\n              </div>\n              <h5 class="name">${t.type}</h5>\n            </button>`})).join("")}\n      `}getTemplate(){return`\n      <div class="gameover-container">\n        <h1>* Game over *</h1>\n        <p class="message"></p>\n        <button class="restart">Restart</button>\n      </div>\n      <div class="config-container">\n        <div class="type-container">\n          <h1 class="subheader">Choose your snakes</h1>\n          <div>\n            <div class="pad"></div>\n            <div class="scroller">\n              ${this.getSnakesTemplate()}\n            </div>\n          </div>\n        </div>\n\n        <div class="count-container">\n        <h1 class="subheader">How many snakes can you handle?</h1>\n          <div>\n            <button class="count" data-count="1" type="button">× 1</button>\n            <button class="count" data-count="2" type="button">× 2</button>\n            <button class="count" data-count="3" type="button">× 3</button>\n            <button class="count" data-count="4" type="button">× 4</button>\n            <button class="count" data-count="5" type="button">× 5</button>\n          </div>\n        </div>\n        <button class="start" type="button">Start game</button>\n      </div>\n    `}}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(607),n(344)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,